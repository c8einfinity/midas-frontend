<h1><?= $block->escapeHtml($block->getData('title')) ?></h1>
<?php
if ($_SERVER["HTTP_HOST"] === "staging.midas.local") {
    $ipInfo = $block->getIpInfo("156.155.231.87");
} else {
    $ipInfo = $block->getIpInfo();
}
$location = $block->getLocation($ipInfo["city"].", ".$ipInfo["country"]);
$points = $location->results[0]->geometry->location;
$closestStores = $block->getStoreList($points->lat, $points->lng, 100);
?>
<?php
if (!defined("TINA4_SUPPRESS")) define("TINA4_SUPPRESS", true);
require_once ("./system/index.php");
?>
<div class="form-group" class="col-md-12">
    <label><b>Search</b></label>
    <input class="form-control" type="text"  name="searchStore" placeholder="Search for Location" value="" onkeyup="searchStores(this.value)">
</div>
<p></p>
<div class="row" id="searchResults">
</div>
<script>
	var nlat, nlong;
	
	console.log ('Initial values');
	nlat = <?=$points->lat?>;
	nlong = <?=$points->lng?>;
	
	function showPosition(position) {
		console.log ('showPosition', position);
		nlat = position.coords.latitude;
	        nlong = position.coords.longitude;
		console.log ('Found coords ', nlat, nlong);
		searchStores('');
	}		
	
	function getMapLocation() {
	  console.log ('Running location check!', navigator);	
	  if (navigator.geolocation) {
		console.log ('Looking for my position');
		navigator.geolocation.getCurrentPosition(showPosition);
	  } else { 
		console('Fallback ', nlat, nlong);
		nlat = <?=$points->lat?>;
		nlong = <?=$points->lng?>;
	  }
	}


	 function initialize() {
		//init
	 }


</script>
<?php
echo  $block->getGoogleMapsScript("initialize");
?>
<script>
    var xmlHttp = null;

    function parseScript(_source) {
        var source = _source;
        var scripts = new Array();

        // Strip out tags
        while(source.indexOf("<script") > -1 || source.indexOf("</script") > -1) {
            var s = source.indexOf("<script");
            var s_e = source.indexOf(">", s);
            var e = source.indexOf("</script", s);
            var e_e = source.indexOf(">", e);

            // Add to scripts array
            scripts.push(source.substring(s_e+1, e));
            // Strip from source
            source = source.substring(0, s) + source.substring(e_e+1);
            }

            // Loop through every script collected and eval it
            for(var i=0; i<scripts.length; i++) {
            try {
            if (scripts[i] != '')
            {
            try  {          //IE
                execScript(scripts[i]);
            }
            catch(ex)           //Firefox
            {
                window.eval(scripts[i]);
            }

            }
            }
            catch(e) {
               // do what you want here when a script fails
               if (e instanceof SyntaxError) console.log (e.message+' - '+scripts[i]);
            }
            }
            // Return the cleaned source
            return source;
    }

    function searchStores(str) {
        if (xmlHttp !== null) {
            xmlHttp.abort();
        }
        xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange=function() {
            if (this.readyState==4 && this.status==200) {
                document.getElementById("searchResults").innerHTML=this.responseText;
                parseScript (this.responseText);
            }
        }
        xmlHttp.open("GET","/system/api/stores/search?search="+str+"&lat="+nlat+"&lng="+nlong,true);
        xmlHttp.send();
    }
	
	console.log ('Running getlocation ...');
	getMapLocation();
</script>

